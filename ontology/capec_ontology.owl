<?xml version="1.0"?>
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
         xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
         xmlns:owl="http://www.w3.org/2002/07/owl#"
         xml:base="ontology/capec_ontology.owl"
         xmlns="ontology/capec_ontology.owl#">
<owl:Ontology rdf:about="ontology/capec_ontology.owl"/>

<owl:DatatypeProperty rdf:about="#has_name">
  <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
  <rdfs:domain rdf:resource="#AttackPattern"/>
  <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
</owl:DatatypeProperty>

<owl:DatatypeProperty rdf:about="#has_id">
  <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
  <rdfs:domain rdf:resource="#AttackPattern"/>
  <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>
</owl:DatatypeProperty>

<owl:DatatypeProperty rdf:about="#has_target">
  <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
  <rdfs:domain rdf:resource="#AttackPattern"/>
  <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
</owl:DatatypeProperty>

<owl:DatatypeProperty rdf:about="#is_worked_against">
  <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
  <rdfs:domain rdf:resource="#AttackPattern"/>
  <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
</owl:DatatypeProperty>

<owl:DatatypeProperty rdf:about="#has_countermeasure">
  <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
  <rdfs:domain rdf:resource="#AttackPattern"/>
  <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
</owl:DatatypeProperty>

<owl:DatatypeProperty rdf:about="#has_prerequisites">
  <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
  <rdfs:domain rdf:resource="#AttackPattern"/>
  <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
</owl:DatatypeProperty>

<owl:DatatypeProperty rdf:about="#has_resource_required">
  <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
  <rdfs:domain rdf:resource="#AttackPattern"/>
  <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
</owl:DatatypeProperty>

<owl:DatatypeProperty rdf:about="#has_likelihood_of_exploit">
  <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
  <rdfs:domain rdf:resource="#AttackPattern"/>
  <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
</owl:DatatypeProperty>

<owl:DatatypeProperty rdf:about="#has_skill_level">
  <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
  <rdfs:domain rdf:resource="#AttackPattern"/>
  <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
</owl:DatatypeProperty>

<owl:DatatypeProperty rdf:about="#employ">
  <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
  <rdfs:domain rdf:resource="#AttackPattern"/>
  <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
</owl:DatatypeProperty>

<owl:DatatypeProperty rdf:about="#has_severity">
  <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
  <rdfs:domain rdf:resource="#AttackPattern"/>
  <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
</owl:DatatypeProperty>

<owl:Class rdf:about="#AttackPattern">
  <rdfs:subClassOf rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
</owl:Class>

<owl:NamedIndividual rdf:about="#Accessing_Functionality_Not_Properly_Constrained_by_ACLs">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Accessing Functionality Not Properly Constrained by ACLs</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">1</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.::The various resources, or individual URLs, must be somehow discoverable by the attacker::The administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Buffer_Overflow_via_Environment_Variables">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Buffer Overflow via Environment Variables</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">10</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Do not expose environment variable to the user.::Do not use untrusted data in your environment variables.::Use a language or compiler that performs automatic bounds checking::There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The application uses environment variables.::An environment variable exposed to the user is vulnerable to a buffer overflow.::The vulnerable environment variable uses untrusted data.::Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.:LEVEL:High::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Overflow_Buffers">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Overflow Buffers</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">100</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Use a language or compiler that performs automatic bounds checking.::Use secure functions not vulnerable to buffer overflow.::If you have to use dangerous functions, make sure that you do boundary checking.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Use OS-level preventative functionality. Not a complete solution.::Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Targeted software performs buffer operations.::Targeted software inadequately performs bounds-checking on buffer operations.::Adversary has the capability to influence the input to buffer operations.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack. Detecting and exploiting a buffer overflow does not require any resources beyond knowledge of and access to the target system.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:In most cases, overflowing a buffer does not require advanced skills beyond the ability to notice an overflow and stuff an input variable with content.:LEVEL:Low::SKILL:In cases of directed overflows, where the motive is to divert the flow of the program or application as per the adversaries' bidding, high level skills are required. This may involve detailed knowledge of the target system architecture and kernel.:LEVEL:High::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Very High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Server_Side_Include_(SSI)_Injection">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Server Side Include (SSI) Injection</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">101</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them::All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive::Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::A web server that supports server side includes and has them enabled::User controllable input that can carry include directives to the web server::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack. Determining whether the server supports SSI does not require special tools, and nor does injecting directives that get executed. Spidering tools can make the task of finding and following links easier.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:The attacker needs to be aware of SSI technology, determine the nature of injection and be able to craft input that results in the SSI directives being executed.:LEVEL:Medium::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Session_Sidejacking">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Session Sidejacking</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">102</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.::Modify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::An attacker and the victim are both using the same WiFi network.::The victim has an active session with a target system.::The victim is not using a secure channel to communicate with the target system (e.g. SSL, VPN, etc.)::The victim initiated communication with a target system that requires transfer of the session token or the target application uses AJAX and thereby periodically rings home asynchronously using the session token::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::A packet sniffing tool, such as wireshark, can be used to capture session information.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:Easy to use tools exist to automate this attack.:LEVEL:Low::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Clickjacking">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Clickjacking</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">103</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.::Turn off JavaScript, Flash and disable CSS.::When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The victim is communicating with the target application via a web based UI and not a thick client::The victim's browser security policies allow at least one of the following JavaScript, Flash, iFrames, ActiveX, or CSS.::The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser)::The victim has an active session with the target system.::The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:Crafting the proper malicious site and luring the victim to this site are not trivial tasks.:LEVEL:High::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Cross_Zone_Scripting">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Cross Zone Scripting</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">104</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Disable script execution.::Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone::Limit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone::Limit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum::Ensure proper HTML output encoding before writing user supplied data to the page::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target must be using a zone-aware browser.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:Ability to craft malicious scripts or find them elsewhere and ability to identify functionality that is running web controls in the local zone and to find an injection vector into that functionality:LEVEL:Medium::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#HTTP_Request_Splitting">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">HTTP Request Splitting</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">105</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.::Configuration: front-end HTTP agents notice ambiguous requests.::Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.::Configuration: Disable reuse of back-end connections.::Configuration: Use HTTP/2 for back-end connections.::Configuration: Use the same web server software for front-end and back-end server.::Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.::Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)::Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.::Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.::Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.::HTTP headers capable of being user-manipulated.::HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Tools capable of crafting malicious HTTP messages and monitoring HTTP messages responses.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.:LEVEL:Medium::SKILL:Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.:LEVEL:Medium::SKILL:Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.:LEVEL:Medium::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede relationships for possible consequences.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Cross_Site_Tracing">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Cross Site Tracing</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">107</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.::Patch web browser against known security origin policy bypass exploits.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::HTTP TRACE is enabled on the web server::The destination system is susceptible to XSS or an adversary can leverage some other weakness to bypass the same origin policy::Scripting is enabled in the client's browser::HTTP is used as the communication protocol between the server and the client::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:Understanding of the HTTP protocol and an ability to craft a malicious script:LEVEL:Medium::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to a destination system's web server.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Very High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Command_Line_Execution_through_SQL_Injection">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Command Line Execution through SQL Injection</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">108</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Disable MSSQL xp_cmdshell directive on the database::Properly validate the data (syntactically and semantically) before writing it to the database.::Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The application does not properly validate data before storing in the database::Backend application implicitly trusts the data stored in the database::Malicious data is used on the backend as a command line argument::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Low</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:The attacker most likely has to be familiar with the internal functionality of the system to launch this attack. Without that knowledge, there are not many feedback mechanisms to give an attacker the indication of how to perform command injection or whether the attack is succeeding.:LEVEL:High::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Very High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Object_Relational_Mapping_Injection">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Object Relational Mapping Injection</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">109</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework::Ensure to keep up to date with security relevant updates to the persistence framework used within your application.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::An application uses data access layer generated by an ORM tool or framework::An application uses user supplied data in queries executed against the database::The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Low</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:Knowledge of general SQL injection techniques and subtleties of the ORM framework is needed:LEVEL:Medium::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject their own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Cause_Web_Server_Misclassification">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Cause Web Server Misclassification</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">11</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Implementation: Server routines should be determined by content not determined by filename or file extension.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Web server software must rely on file name or file extension for processing.::The attacker must be able to make HTTP requests to the web server.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:To modify file name or file extension:LEVEL:Low::SKILL:To use misclassification to force the Web server to disclose configuration information, source, or binary data:LEVEL:Medium::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#SQL_Injection_through_SOAP_Parameter_Tampering">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">SQL Injection through SOAP Parameter Tampering</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">110</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Properly validate and sanitize/reject user input at the service provider.::Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query.::At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SOAP messages are used as a communication mechanism in the system::SOAP parameters are not properly validated at the service provider::The service provider does not properly utilize parameter binding when building SQL queries::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:If the attacker is able to gain good understanding of the system's database schema:LEVEL:Medium::SKILL:If the attacker has to perform Blind SQL Injection:LEVEL:High::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Very High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#JSON_Hijacking_(aka_JavaScript_Hijacking)">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">JSON Hijacking (aka JavaScript Hijacking)</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">111</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce.::On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).::Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session.::Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::JSON is used as a transport mechanism between the client and the server::The target server cannot differentiate real requests from forged requests::The JSON object returned from the server can be accessed by the attackers' malicious code via a script tag::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:Once this attack pattern is developed and understood, creating an exploit is not very complex.The attacker needs to have knowledge of the URLs that need to be accessed on the target system to request the JSON objects.:LEVEL:Medium::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Brute_Force">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Brute Force</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">112</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.::Use a secret space that is well known and with no known patterns that may reduce functional size.::Do not provide the means for an attacker to determine success independently. This forces the attacker to check their guesses against an external authority, which can slow the attack and warn the defender. This mitigation may not be possible if testing material must appear externally, such as with a transmitted cryptotext.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The attacker must be able to determine when they have successfully guessed the secret. As such, one-time pads are immune to this type of attack since there is no way to determine when a guess is correct.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack. Ultimately, the speed with which an attacker discovers a secret is directly proportional to the computational resources the attacker has at their disposal. This attack method is resource expensive: having large amounts of computational power do not guarantee timely success, but having only minimal resources makes the problem intractable against all but the weakest secret selection procedures.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:The attack simply requires basic scripting ability to automate the exploration of the search space. More sophisticated attackers may be able to use more advanced methods to reduce the search space and increase the speed with which the secret is located.:LEVEL:Low::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Interface_Manipulation">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Interface Manipulation</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">113</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target system must expose interface functionality in a manner that can be discovered and manipulated by an adversary. This may require reverse engineering the interface or decrypting/de-obfuscating client-server exchanges.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The requirements vary depending upon the nature of the interface. For example, application-layer APIs related to the processing of the HTTP protocol may require one or more of the following: an Adversary-In-The-Middle (CAPEC-94) proxy, a web browser, or a programming/scripting language.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Authentication_Abuse">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Authentication Abuse</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">114</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc. which is flawed in some way.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::A client application, command-line access to a binary, or scripting language capable of interacting with the authentication mechanism.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Authentication_Bypass">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Authentication Bypass</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">115</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::A client application, such as a web browser, or a scripting language capable of interacting with the target.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Excavation">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Excavation</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">116</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Minimize error/response output to only what is necessary for functional use or corrective language.::Remove potentially sensitive information that is not necessary for the application's functionality.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::An adversary requires some way of interacting with the system.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::A tool, such as an Adversary in the Middle (CAPEC-94) Proxy or a fuzzer, that is capable of generating and injecting custom inputs to be used in the attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Interception">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Interception</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">117</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target must transmit data over a medium that is accessible to the adversary.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The adversary must have the necessary technology to intercept information passing between the nodes of a network. For TCP/IP, the capability to run tcpdump, ethereal, etc. can be useful. Depending upon the data being targeted the technological requirements will change.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Low</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Choosing_Message_Identifier">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Choosing Message Identifier</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">12</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Associate some ACL (in the form of a token) with an authenticated user which they provide middleware. The middleware uses this token as part of its channel/message selection for that client, or part of a discerning authorization decision for privileged channels/messages. The purpose is to architect the system in a way that associates proper authentication/authorization with each channel/message.::Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Information and client-sensitive (and client-specific) data must be present through a distribution channel available to all users.::Distribution means must code (through channel, message identifiers, or convention) message destination in a manner visible within the distribution means itself (such as a control channel) or in the messages themselves.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The adversary needs the ability to control source code or application configuration responsible for selecting which message/channel id is absorbed from the public distribution means.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:All the adversary needs to discover is the format of the messages on the channel/distribution means and the particular identifier used within the messages.:LEVEL:Low::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">This pattern of attack is defined by the selection of messages distributed via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Double_Encoding">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Double Encoding</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">120</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.::Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.::When client input is required from web-based forms, avoid using the GET method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the POST method whenever possible.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Refer to the RFCs to safely decode URL.::Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.::There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target's filters must fail to detect that a character has been doubly encoded but its interpreting engine must still be able to convert a doubly encoded character to an un-encoded character.::The application accepts and decodes URL string request.::The application performs insufficient filtering/canonicalization on the URLs.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Tools that automate encoding of data can assist the adversary in generating encoded strings.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Low</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Exploit_Non-Production_Interfaces">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Exploit Non-Production Interfaces</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">121</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target must have configured non-production interfaces and failed to secure or remove them when brought into a production environment.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::For some interfaces, the adversary will need that appropriate client application or hardware that interfaces with the interface. Other non-production interfaces can be executed using simple tools, such as web browsers or console windows. In some cases, an adversary may need to be able to authenticate to the target before it can access the vulnerable interface.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Low</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:Exploiting non-production interfaces requires significant skill and knowledge about the potential non-production interfaces left enabled in production.:LEVEL:High::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary exploits a sample, demonstration, test, or debug interface that is unintentionally enabled on a production system, with the goal of gleaning information or leveraging functionality that would otherwise be unavailable.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Privilege_Abuse">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Privilege Abuse</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">122</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target must have misconfigured their access control mechanisms such that sensitive information, which should only be accessible to more trusted users, remains accessible to less trusted users.::The adversary must have access to the target, albeit with an account that is less privileged than would be appropriate for the targeted resources.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack. The ability to access the target is required.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:Adversary can leverage privileged features they already have access to without additional effort or skill. Adversary is only required to have access to an account with improper priveleges.:LEVEL:Low::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Buffer_Manipulation">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Buffer Manipulation</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">123</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The adversary must identify a programmatic means for interacting with a buffer, such as vulnerable C code, and be able to provide input to this interaction.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Very High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Shared_Resource_Manipulation">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Shared Resource Manipulation</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">124</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target applications, threads or functions must share resources between themselves.::The adversary must be able to manipulate some piece of the shared resource either directly or indirectly and the other users of the data must accept the changed data as valid. Usually this requires that the adversary be able to compromise one of the sharing applications or threads in order to manipulate the shared data.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: The attacker does not need any specialized resources to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary exploits a resource shared between multiple applications, an application pool or hardware pin multiplexing to affect behavior. Resources may be shared between multiple applications or between multiple threads of a single application. Resource sharing is usually accomplished through mutual access to a single memory location or multiplexed hardware pins. If an adversary can manipulate this shared resource (usually by co-opting one of the applications or threads) the other applications or threads using the shared resource will often continue to trust the validity of the compromised shared resource and use it in their calculations. This can result in invalid trust assumptions, corruption of additional data through the normal operations of the other users of the shared resource, or even cause a crash or compromise of the sharing applications.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Flooding">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Flooding</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">125</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Ensure that protocols have specific limits of scale configured.::Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.::Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Any target that services requests is vulnerable to this attack on some level of scale.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::A script or program capable of generating more requests than the target can handle, or a network or cluster of objects all capable of making simultaneous requests.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Path_Traversal">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Path Traversal</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">126</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Design: Configure the access control correctly.::Design: Enforce principle of least privilege.::Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.::Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.::Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.::Implementation: Perform input validation for all remote content, including remote and user-generated content.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::Implementation: Use indirect references rather than actual file names.::Implementation: Use possible permissions on file access when developing and deploying web applications.::Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The attacker must be able to control the path that is requested of the target.::The target must fail to adequately sanitize incoming paths::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The ability to manually manipulate path information either directly through a client application relative to the service or application or via a proxy application.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:Simple command line attacks or to inject the malicious payload in a web page.:LEVEL:Low::SKILL:Customizing attacks to bypass non trivial filters in the application.:LEVEL:Medium::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or ) and/or dots (.)) to reach desired directories or files.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Very High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Directory_Indexing">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Directory Indexing</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">127</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.::2. Preventing with .htaccess in Apache web server: In .htaccess, write Options-indexes.::3. Suppressing error messages: using error 403 Forbidden message exactly like error 404 Not Found message.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.::The adversary must be able to control the path that is requested of the target.::The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.::The server version or patch level must not inherently prevent known directory listing attacks from working.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Ability to send HTTP requests to a web application.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:To issue the request to URL without given a specific file name:LEVEL:Low::SKILL:To bypass the access control of the directory of listings:LEVEL:High::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Integer_Attacks">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Integer Attacks</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">128</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target application must have an integer variable for which only some of the possible integer values are expected by the application and where there are no checks on the value of the variable before use.::The attacker must be able to manipulate the targeted integer variable such that normal operations result in non-standard values due to the storage structure of integers.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Pointer_Manipulation">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Pointer Manipulation</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">129</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target application must have a pointer variable that the attacker can influence to hold an arbitrary value.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">This attack pattern involves an adversary manipulating a pointer within a target application resulting in the application accessing an unintended memory location. This can result in the crashing of the application or, for certain pointer values, access to data that would not normally be possible or the execution of arbitrary code. Since pointers are simply integer variables, Integer Attacks may often be used in Pointer Attacks.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Subverting_Environment_Variable_Values">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Subverting Environment Variable Values</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">13</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Protect environment variables against unauthorized read and write access.::Protect the configuration files which contain environment variables against illegitimate read and write access.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::An environment variable is accessible to the user.::An environment variable used by the application can be tainted with user supplied data.::Input data used in an environment variable is not validated properly.::The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an adversary may attempt to manipulate that variable.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:In a web based scenario, the client controls the data that it submitted to the server. So anybody can try to send malicious data and try to bypass the authentication mechanism.:LEVEL:Low::SKILL:Some more advanced attacks may require knowledge about protocols and probing technique which help controlling a variable. The malicious user may try to understand the authentication mechanism in order to defeat it.:LEVEL:High::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The adversary directly or indirectly modifies environment variables used by or controlling the target software. The adversary's goal is to cause the target software to deviate from its expected operation in a manner that benefits the adversary.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Very High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Excessive_Allocation">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Excessive Allocation</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">130</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Limit the amount of resources that are accessible to unprivileged users.::Assume all input is malicious. Consider all potentially relevant properties when validating input.::Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.::Use resource-limiting settings, if possible.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target must accept service requests from the attacker and the adversary must be able to control the resource allocation associated with this request to be in excess of the normal allocation. The latter is usually accomplished through the presence of a bug on the target that allows the adversary to manipulate variables used in the allocation.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Resource_Leak_Exposure">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Resource Leak Exposure</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">131</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::If possible, leverage coding language(s) that do not allow this weakness to occur (e.g., Java, Ruby, and Python all perform automatic garbage collection that releases memory for objects that have been deallocated).::Memory should always be allocated/freed using matching functions (e.g., malloc/free, new/delete, etc.)::Implement best practices with respect to memory management, including the freeing of all allocated resources at all exit points and ensuring consistency with how and where memory is freed in a function.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target must have a resource leak that the adversary can repeatedly trigger.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary utilizes a resource leak on the target to deplete the quantity of the resource available to service legitimate requests.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Symlink_Attack">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Symlink Attack</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">132</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.::Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The targeted application must perform the desired activities on a file without checking whether the file is a symbolic link or not. The adversary must be able to predict the name of the file the target application is modifying and be able to create a new symbolic link where that file would appear.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack. The only requirement is the ability to create the necessary symbolic link.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Low</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:To create symlinks:LEVEL:Low::SKILL:To identify the files and create the symlinks during the file operation time window:LEVEL:High::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Try_All_Common_Switches">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Try All Common Switches</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">133</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Design: Minimize switch and option functionality to only that necessary for correct function of the command.::Implementation: Remove all debug and testing options from production code.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The attacker must be able to control the options or switches sent to the target.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack. The only requirement is the ability to send requests to the target.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker attempts to invoke all common switches and options in the target application for the purpose of discovering weaknesses in the target. For example, in some applications, adding a --debug switch causes debugging information to be displayed, which can sometimes reveal sensitive processing or configuration information to an attacker. This attack differs from other forms of API abuse in that the attacker is indiscriminately attempting to invoke options in the hope that one of them will work rather than specifically targeting a known option. Nonetheless, even if the attacker is familiar with the published options of a targeted application this attack method may still be fruitful as it might discover unpublicized functionality.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Email_Injection">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Email Injection</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">134</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target application must allow the user to send email to some recipient, to specify the content at least one header field in the message, and must fail to sanitize against the injection of command separators.::The adversary must have the ability to access the target mail application.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary manipulates the headers and content of an email message by injecting data via the use of delimiter characters native to the protocol.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Format_String_Injection">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Format String Injection</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">135</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Limit the usage of formatting string functions.::Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:In order to discover format string vulnerabilities it takes only low skill, however, converting this discovery into a working exploit requires advanced knowledge on the part of the adversary.:LEVEL:High::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#LDAP_Injection">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">LDAP Injection</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">136</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.::Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:The attacker needs to have knowledge of LDAP, especially its query syntax.:LEVEL:Medium::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Parameter_Injection">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Parameter Injection</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">137</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.::Treat all user input as untrusted data that must be validated before use.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target application must use a parameter encoding where separators and parameter identifiers are expressed in regular text.::The target application must accept a string as user input, fail to sanitize characters that have a special meaning in the parameter encoding, and insert the user-supplied string in an encoding which is then processed.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack. The only requirement is the ability to provide string input to the target.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&amp;). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value myInput&amp;new_param=myValue, then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Reflection_Injection">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Reflection Injection</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">138</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target application must utilize reflection libraries and allow users to directly control the parameters to these methods. If the adversary can host classes where the target can invoke them, more powerful variants of this attack are possible.::The target application must accept a string as user input, fail to sanitize characters that have a special meaning in the parameter encoding, and insert the user-supplied string in an encoding which is then processed.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary supplies a value to the target application which is then used by reflection methods to identify a class, method, or field. For example, in the Java programming language the reflection libraries permit an application to inspect, load, and invoke classes and their components by name. If an adversary can control the input into these methods including the name of the class/method/field or the parameters passed to methods, they can cause the targeted application to invoke incorrect methods, read random fields, or even to load and utilize malicious classes that the adversary created. This can lead to the application revealing sensitive information, returning incorrect results, or even having the adversary take control of the targeted application.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Very High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Relative_Path_Traversal">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Relative Path Traversal</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">139</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement::Implementation: Perform input validation for all remote content, including remote and user-generated content.::Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.::Implementation: Prefer working without user input when using file system calls::Implementation: Use indirect references rather than actual file names.::Implementation: Use possible permissions on file access when developing and deploying web applications.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target application must accept a string as user input, fail to sanitize combinations of characters in the input that have a special meaning in the context of path navigation, and insert the user-supplied string into path navigation commands.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:To inject the malicious payload in a web page:LEVEL:Low::SKILL:To bypass non trivial filters in the application:LEVEL:High::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or ) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Client-side_Injection-induced_Buffer_Overflow">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Client-side Injection-induced Buffer Overflow</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">14</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The client software should not install untrusted code from a non-authenticated server.::The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.::Perform input validation for length of buffer inputs.::Use a language or compiler that performs automatic bounds checking.::Use an abstraction library to abstract away risky APIs. Not a complete solution.::Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.::Ensure all buffer uses are consistently bounds-checked.::Use OS-level preventative functionality. Not a complete solution.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The targeted client software communicates with an external server.::The targeted client software has a buffer overflow vulnerability.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:To achieve a denial of service, an attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector.:LEVEL:Low::SKILL:Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap requires a more in-depth knowledge and higher skill level.:LEVEL:High::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. This hostile service is created to deliver the correct content to the client software. For example, if the client-side application is a browser, the service will host a webpage that the browser loads.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Bypassing_of_Intermediate_Forms_in_Multiple-Form_Sets">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Bypassing of Intermediate Forms in Multiple-Form Sets</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">140</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target must collect information from the user in a series of forms where each form has its own URL that the attacker can anticipate and the application must fail to detect attempts to access intermediate forms without first filling out the previous forms.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Some web applications require users to submit information through an ordered sequence of web forms. This is often done if there is a very large amount of information being collected or if information on earlier forms is used to pre-populate fields or determine which additional information the application needs to collect. An attacker who knows the names of the various forms in the sequence may be able to explicitly type in the name of a later form and navigate to it without first going through the previous forms. This can result in incomplete collection of information, incorrect assumptions about the information submitted by the attacker, or other problems that can impair the functioning of the application.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Cache_Poisoning">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Cache Poisoning</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">141</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Configuration: Disable client side caching.::Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The attacker must be able to modify the value stored in a cache to match a desired value.::The targeted application must not be able to detect the illicit modification of the cache and must trust the cache value in its calculations.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:To overwrite/modify targeted cache:LEVEL:Medium::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#DNS_Cache_Poisoning">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">DNS Cache Poisoning</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">142</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Configuration: Make sure your DNS servers have been updated to the latest versions::Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.::Configuration: Disable client side DNS caching.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::A DNS cache must be vulnerable to some attack that allows the adversary to replace addresses in its lookup table.Client applications must trust the corrupted cashed values and utilize them for their domain name resolutions.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The adversary must have the resources to modify the targeted cache. In addition, in most cases the adversary will wish to host the sites to which users will be redirected, although in some cases redirecting to a third party site will accomplish the adversary's goals.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:To overwrite/modify targeted DNS cache:LEVEL:Medium::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Detect_Unpublicized_Web_Pages">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Detect Unpublicized Web Pages</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">143</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The targeted web site must include pages within its published tree that are not connected to its tree of links. The sensitivity of the content of these pages determines the severity of this attack.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Spidering tools to explore the target web site are extremely useful in this attack especially when attacking large sites. Some tools might also be able to automatically construct common page locations from known paths.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary searches a targeted web site for web pages that have not been publicized. In doing this, the adversary may be able to gain access to information that the targeted site did not intend to make public.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Low</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Detect_Unpublicized_Web_Services">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Detect Unpublicized Web Services</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">144</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The targeted web site must include unpublished services within its web tree. The nature of these services determines the severity of this attack.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Spidering tools to explore the target web site are extremely useful in this attack especially when attacking large sites. Some tools might also be able to automatically construct common service queries from known paths.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary searches a targeted web site for web services that have not been publicized. This attack can be especially dangerous since unpublished but available services may not have adequate security controls placed upon them given that an administrator may believe they are unreachable.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Low</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Checksum_Spoofing">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Checksum Spoofing</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">145</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The adversary must be able to intercept a message from the sender (keeping the recipient from getting it), modify it, and send the modified message to the recipient.::The sender and recipient must use a checksum to protect the integrity of their message and transmit this checksum in a manner where the adversary can intercept and modify it.::The checksum value must be computable using information known to the adversary. A cryptographic checksum, which uses a key known only to the sender and recipient, would thwart this attack.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The adversary must have a utility that can intercept and modify messages between the sender and recipient.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary spoofs a checksum message for the purpose of making a payload appear to have a valid corresponding checksum. Checksums are used to verify message integrity. They consist of some value based on the value of the message they are protecting. Hash codes are a common checksum mechanism. Both the sender and recipient are able to compute the checksum based on the contents of the message. If the message contents change between the sender and recipient, the sender and recipient will compute different checksum values. Since the sender's checksum value is transmitted with the message, the recipient would know that a modification occurred. In checksum spoofing an adversary modifies the message body and then modifies the corresponding checksum so that the recipient's checksum calculation will match the checksum (created by the adversary) in the message. This would prevent the recipient from realizing that a change occurred.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#XML_Schema_Poisoning">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">XML Schema Poisoning</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">146</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Design: Protect the schema against unauthorized modification.::Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.::Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Some level of access to modify the target schema.::The schema used by the target application must be improperly secured against unauthorized modification and manipulation.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Access to the schema and the knowledge and ability modify it. Ability to replace or redirect access to the modified schema.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Low</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary corrupts or modifies the content of XML schema information passed between a client and server for the purpose of undermining the security of the target. XML Schemas provide the structure and content definitions for XML documents. Schema poisoning is the ability to manipulate a schema either by replacing or modifying it to compromise the programs that process documents that use this schema.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#XML_Ping_of_the_Death">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">XML Ping of the Death</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">147</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.::Implementation: Provide for network flow control and traffic shaping to control access to the resources.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target must receive and process XML transactions.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Transaction generator(s)/source(s) and ability to cause arrival of messages at the target with sufficient rapidity to overload target. Larger targets may be able to handle large volumes of requests so the attacker may require significant resources (such as a distributed network) to affect the target. However, the resources required of the attacker would be less than in the case of a simple flooding attack against the same target.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Low</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:To send small XML messages:LEVEL:Low::SKILL:To use distributed network to launch the attack:LEVEL:High::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Content_Spoofing">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Content Spoofing</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">148</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target must provide content but fail to adequately protect it against modification.The adversary must have the means to alter data to which they are not authorized. If the content is to be modified in transit, the adversary must be able to intercept the targeted messages.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::If the content is to be modified in transit, the adversary requires a tool capable of intercepting the target's communication and generating/creating custom packets to impact the communications. In some variants, the targeted content is altered so that all or some of it is redirected towards content published by the attacker (for example, images and frames in the target's web site might be modified to be loaded from a source controlled by the attacker). In these cases, the attacker requires the necessary resources to host the replacement content.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Explore_for_Predictable_Temporary_File_Names">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Explore for Predictable Temporary File Names</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">149</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The targeted application must create names for temporary files using a predictable procedure, e.g. using sequentially increasing numbers.::The attacker must be able to see the names of the files the target is creating.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker explores a target to identify the names and locations of predictable temporary files for the purpose of launching further attacks against the target. This involves analyzing naming conventions and storage locations of the temporary files created by a target application. If an attacker can predict the names of temporary files they can use this information to mount other attacks, such as information gathering and symlink attacks.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Command_Delimiters">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Command Delimiters</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">15</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Design: Perform allowlist validation against a positive specification for command length, type, and parameters.::Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account::Implementation: Perform input validation for all remote content.::Implementation: Use type conversions such as JDBC prepared statements.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Software's input validation or filtering must not detect and block presence of additional malicious command.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:The attacker has to identify injection vector, identify the specific commands, and optionally collect the output, i.e. from an interactive session.:LEVEL:Medium::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Collect_Data_from_Common_Resource_Locations">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Collect Data from Common Resource Locations</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">150</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The targeted applications must either expect files to be located at a specific location or, if the location of the files can be configured by the user, the user either failed to move the files from the default location or placed them in a conventional location for files of the given type.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack. In some cases, the attacker need not even have direct access to the locations on the target computer where the targeted resources reside.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Identity_Spoofing">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Identity Spoofing</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">151</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Employ robust authentication processes (e.g., multi-factor authentication).::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The identity associated with the message or resource must be removable or modifiable in an undetectable way.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Input_Data_Manipulation">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Input Data Manipulation</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">153</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target must accept user data for processing and the manner in which this data is processed must depend on some aspect of the format or flags that the attacker can control.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Resource_Location_Spoofing">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Resource Location Spoofing</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">154</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Monitor network activity to detect any anomalous or unauthorized communication exchanges.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None. All applications rely on file paths and therefore, in theory, they or their resources could be affected by this type of attack.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Screen_Temporary_Files_for_Sensitive_Information">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Screen Temporary Files for Sensitive Information</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">155</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target application must utilize temporary files and must fail to adequately secure them against other parties reading them.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Because some application may have a large number of temporary files and/or these temporary files may be very large, an adversary may need tools that help them quickly search these files for sensitive information. If the adversary can simply copy the files to another location and if the speed of the search is not important, the adversary can still perform the attack without any special resources.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary exploits the temporary, insecure storage of information by monitoring the content of files used to store temp data during an application's routine execution flow. Many applications use temporary files to accelerate processing or to provide records of state across multiple executions of the application. Sometimes, however, these temporary files may end up storing sensitive information. By screening an application's temporary files, an adversary might be able to discover such sensitive information. For example, web browsers often cache content to accelerate subsequent lookups. If the content contains sensitive information then the adversary could recover this from the web cache.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Sniffing_Attacks">
  <rdf:type rdf:resource="#AttackPattern"/>
    <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Sniffing_Attacks</has_name>
    <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">157</has_id>
    <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Encrypt_sensitive_information_when_transmitted_on_insecure_mediums_to_prevent_interception.::</has_countermeasure>
    <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The_target_data_stream_must_be_transmitted_on_a_medium_to_which_the_adversary_has_access.::</has_prerequisites>
    <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The_adversary_must_be_able_to_intercept_the_transmissions_containing_the_data_of_interest._Depending_on_the_medium_of_transmission_and_the_path_the_data_takes_between_the_sender_and_recipient,_the_adversary_may_require_special_equipment_and/or_require_that_this_equipment_be_placed_in_specific_locations_(e.g.,_a_network_sniffing_tool)::</has_resource_required>
    <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">_</has_likelihood_of_exploit>
    <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">_</has_skill_level>
    <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">In_this_attack_pattern,_the_adversary_intercepts_information_transmitted_between_two_third_parties._The_adversary_must_be_able_to_observe,_read,_and/or_hear_the_communication_traffic,_but_not_necessarily_block_the_communication_or_change_its_content._Any_transmission_medium_can_theoretically_be_sniffed_if_the_adversary_can_examine_the_contents_between_the_sender_and_recipient._Sniffing_Attacks_are_similar_to_Adversary-In-The-Middle_attacks_(CAPEC-94),_but_are_entirely_passive._AiTM_attacks_are_predominantly_active_and_often_alter_the_content_of_the_communications_themselves.</employ>
    <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
  </owl:NamedIndividual>

  <owl:NamedIndividual rdf:about="#Sniffing_Network_Traffic">
    <rdf:type rdf:resource="#AttackPattern"/>
    <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Sniffing_Network_Traffic</has_name>
    <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">158</has_id>
    <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Obfuscate_network_traffic_through_encryption_to_prevent_its_readability_by_network_sniffers.::Employ_appropriate_levels_of_segmentation_to_your_network_in_accordance_with_best_practices.::</has_countermeasure>
    <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The_target_must_be_communicating_on_a_network_protocol_visible_by_a_network_sniffing_application.::The_adversary_must_obtain_a_logical_position_on_the_network_from_intercepting_target_network_traffic_is_possible._Depending_on_the_network_topology,_traffic_sniffing_may_be_simple_or_challenging._If_both_the_target_sender_and_target_recipient_are_members_of_a_single_subnet,_the_adversary_must_also_be_on_that_subnet_in_order_to_see_their_traffic_communication.::</has_prerequisites>
    <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::A_tool_with_the_capability_of_presenting_network_communication_traffic_(e.g.,_Wireshark,_tcpdump,_Cain_and_Abel,_etc.).::</has_resource_required>
    <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">_</has_likelihood_of_exploit>
    <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:Adversaries_can_obtain_and_set_up_open-source_network_sniffing_tools_easily.:LEVEL:Low::</has_skill_level>
    <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">In_this_attack_pattern,_the_adversary_monitors_network_traffic_between_nodes_of_a_public_or_multicast_network_in_an_attempt_to_capture_sensitive_information_at_the_protocol_level._Network_sniffing_applications_can_reveal_TCP/IP,_DNS,_Ethernet,_and_other_low-level_network_communication_information._The_adversary_takes_a_passive_role_in_this_attack_pattern_and_simply_observes_and_analyzes_the_traffic._The_adversary_may_precipitate_or_indirectly_influence_the_content_of_the_observed_transaction,_but_is_never_the_intended_recipient_of_the_target_information.</employ>
    <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
  </owl:NamedIndividual>

  <owl:NamedIndividual rdf:about="#Redirect_Access_to_Libraries">
    <rdf:type rdf:resource="#AttackPattern"/>
    <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Redirect_Access_to_Libraries</has_name>
    <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">159</has_id>
    <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Implementation:_Restrict_the_permission_to_modify_the_entries_in_the_configuration_file.::Implementation:_Check_the_integrity_of_the_dynamically_linked_libraries_before_use_them.::Implementation:_Use_obfuscation_and_other_techniques_to_prevent_reverse_engineering_the_libraries.::</has_countermeasure>
    <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The_target_must_utilize_external_libraries_and_must_fail_to_verify_the_integrity_of_these_libraries_before_using_them.::</has_prerequisites>
    <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">_</has_resource_required>
    <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
    <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:To_modify_the_entries_in_the_configuration_file_pointing_to_malicious_libraries:LEVEL:Low::SKILL:To_force_symlink_and_timing_issues_for_redirecting_access_to_libraries:LEVEL:Medium::SKILL:To_reverse_engineering_the_libraries_and_inject_malicious_code_into_the_libraries:LEVEL:High::</has_skill_level>
    <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An_adversary_exploits_a_weakness_in_the_way_an_application_searches_for_external_libraries_to_manipulate_the_execution_flow_to_point_to_an_adversary_supplied_library_or_code_base._This_pattern_of_attack_allows_the_adversary_to_compromise_the_application_or_server_via_the_execution_of_unauthorized_code._An_application_typically_makes_calls_to_functions_that_are_a_part_of_libraries_external_to_the_application._These_libraries_may_be_part_of_the_operating_system_or_they_may_be_third_party_libraries._If_an_adversary_can_redirect_an_application's_attempts_to_access_these_libraries_to_other_libraries_that_the_adversary_supplies,_the_adversary_will_be_able_to_force_the_targeted_application_to_execute_arbitrary_code._This_is_especially_dangerous_if_the_targeted_application_has_enhanced_privileges._Access_can_be_redirected_through_a_number_of_techniques,_including_the_use_of_symbolic_links,_search_path_modification,_and_relative_path_manipulation.</employ>
    <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Very_High</has_severity>
  </owl:NamedIndividual>

  <owl:NamedIndividual rdf:about="#Dictionary-based_Password_Attack">
    <rdf:type rdf:resource="#AttackPattern"/>
    <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Dictionary-based_Password_Attack</has_name>
    <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">16</has_id>
    <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Create_a_strong_password_policy_and_ensure_that_your_system_enforces_this_policy.::Implement_an_intelligent_password_throttling_mechanism._Care_must_be_taken_to_assure_that_these_mechanisms_do_not_excessively_enable_account_lockout_attacks_such_as_CAPEC-2.::Leverage_multi-factor_authentication_for_all_authentication_services.::</has_countermeasure>
    <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The_system_uses_one_factor_password_based_authentication.::The_system_does_not_have_a_sound_password_policy_that_is_being_enforced.::The_system_does_not_implement_an_effective_password_throttling_mechanism.::</has_prerequisites>
    <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::A_machine_with_sufficient_resources_for_the_job_(e.g._CPU,_RAM,_HD)._Applicable_dictionaries_are_required._Also_a_password_cracking_tool_or_a_custom_script_that_leverages_the_dictionary_database_to_launch_the_attack.::</has_resource_required>
    <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_likelihood_of_exploit>
    <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:A_variety_of_password_cracking_tools_and_dictionaries_are_available_to_launch_this_type_of_an_attack.:LEVEL:Low::</has_skill_level>
    <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An_attacker_tries_each_of_the_words_in_a_dictionary_as_passwords_to_gain_access_to_the_system_via_some_user's_account._If_the_password_chosen_by_the_user_was_a_word_within_the_dictionary,_this_attack_will_be_successful_(in_the_absence_of_other_mitigations)._This_is_a_specific_instance_of_the_password_brute_forcing_attack_pattern._Dictionary_Attacks_differ_from_similar_attacks_such_as_Password_Spraying_(CAPEC-565)_and_Credential_Stuffing_(CAPEC-600),_since_they_leverage_unknown_username/password_combinations_and_don't_care_about_inducing_account_lockouts.</employ>
    <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
  </owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Exploit_Script-BasedAPIs">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Exploit Script-Based APIs</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">160</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target application must include the use of APIs that execute scripts.::The target application must allow the attacker to provide some or all of the arguments to one of these script interpretation methods and must fail to adequately filter these arguments for dangerous or unwanted script commands.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Some APIs support scripting instructions as arguments. Methods that take scripted instructions (or references to scripted instructions) can be very flexible and powerful. However, if an attacker can specify the script that serves as input to these methods they can gain access to a great deal of functionality. For example, HTML pages support &lt;script&gt; tags that allow scripting languages to be embedded in the page and then interpreted by the receiving web browser. If the content provider is malicious, these scripts can compromise the client application. Some applications may even execute the scripts under their own identity (rather than the identity of the user providing the script) which can allow attackers to perform activities that would otherwise be denied to them.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Infrastructure_Manipulation">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Infrastructure Manipulation</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">161</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The targeted client must access the site via infrastructure that the attacker has co-opted and must fail to adequately verify that the communication channel is operating correctly (e.g. by verifying that they are, in fact, connected to the site they intended.)::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The attacker must be able to corrupt the infrastructure used by the client. For some variants of this attack, the attacker must be able to stand up their own services that mimic the services the targeted client intends to use.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Manipulating_Hidden_Fields">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Manipulating Hidden Fields</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">162</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The_targeted_site_must_contain_hidden_fields_to_be_modified.::The_targeted_site_must_not_validate_the_hidden_fields_with_backend_processing.::</has_prerequisites>
    <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The_adversary_must_have_the_ability_to_modify_hidden_fields_by_editing_the_HTTP_response_to_the_server.::</has_resource_required>
    <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">_</has_likelihood_of_exploit>
    <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">_</has_skill_level>
    <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An_adversary_exploits_a_weakness_in_the_server's_trust_of_client-side_processing_by_modifying_data_on_the_client-side,_such_as_price_information,_and_then_submitting_this_data_to_the_server,_which_processes_the_modified_data._For_example,_eShoplifting_is_a_data_manipulation_attack_against_an_on-line_merchant_during_a_purchasing_transaction._The_manipulation_of_price,_discount_or_quantity_fields_in_the_transaction_message_allows_the_adversary_to_acquire_items_at_a_lower_cost_than_the_merchant_intended._The_adversary_performs_a_normal_purchasing_transaction_but_edits_hidden_fields_within_the_HTML_form_response_that_store_price_or_other_information_to_give_themselves_a_better_deal._The_merchant_then_uses_the_modified_pricing_information_in_calculating_the_cost_of_the_selected_items.</employ>
    <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
  </owl:NamedIndividual>

  <owl:NamedIndividual rdf:about="#Spear_Phishing">
    <rdf:type rdf:resource="#AttackPattern"/>
    <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Spear_Phishing</has_name>
    <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">163</has_id>
    <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Do_not_follow_any_links_that_you_receive_within_your_e-mails_and_certainly_do_not_input_any_login_credentials_on_the_page_that_they_take_you_too._Instead,_call_your_Bank,_PayPal,_eBay,_etc.,_and_inquire_about_the_problem._A_safe_practice_would_also_be_to_type_the_URL_of_your_bank_in_the_browser_directly_and_only_then_log_in._Also,_never_reply_to_any_e-mails_that_ask_you_to_provide_sensitive_information_of_any_kind.::</has_countermeasure>
    <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None._Any_user_can_be_targeted_by_a_Spear_Phishing_attack.::</has_prerequisites>
    <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::An_adversay_must_have_the_ability_communicate_their_phishing_scheme_to_the_victims_(via_email,_instance_message,_etc.),_as_well_as_a_website_or_other_platform_for_victims_to_enter_personal_information_into.::</has_resource_required>
    <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
    <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:Spear_phishing_attacks_require_specific_knowledge_of_the_victims_being_targeted,_such_as_which_bank_is_being_used_by_the_victims,_or_websites_they_commonly_log_into_(Google,_Facebook,_etc).:LEVEL:Medium::</has_skill_level>
    <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An_adversary_targets_a_specific_user_or_group_with_a_Phishing_(CAPEC-98)_attack_tailored_to_a_category_of_users_in_order_to_have_maximum_relevance_and_deceptive_capability._Spear_Phishing_is_an_enhanced_version_of_the_Phishing_attack_targeted_to_a_specific_user_or_group._The_quality_of_the_targeted_email_is_usually_enhanced_by_appearing_to_come_from_a_known_or_trusted_entity._If_the_email_account_of_some_trusted_entity_has_been_compromised_the_message_may_be_digitally_signed._The_message_will_contain_information_specific_to_the_targeted_users_that_will_enhance_the_probability_that_they_will_follow_the_URL_to_the_compromised_site._For_example,_the_message_may_indicate_knowledge_of_the_targets_employment,_residence,_interests,_or_other_information_that_suggests_familiarity._As_soon_as_the_user_follows_the_instructions_in_the_message,_the_attack_proceeds_as_a_standard_Phishing_attack.</employ>
    <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
  </owl:NamedIndividual>

  <owl:NamedIndividual rdf:about="#Mobile_Phishing">
    <rdf:type rdf:resource="#AttackPattern"/>
    <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Mobile_Phishing</has_name>
    <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">164</has_id>
    <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Do_not_follow_any_links_that_you_receive_within_text_messages_and_do_not_input_any_login_credentials_on_the_page_that_they_take_you_too._Instead,_call_your_Bank,_PayPal,_eBay,_etc.,_and_inquire_about_the_problem._Safe_practices_also_include_leveraging_the_entity's_mobile_application_or_directly_typing_the_entity's_URL_in_the_browser_and_only_then_logging_in._Never_reply_to_any_text_messages_that_ask_you_to_provide_sensitive_information_of_any_kind.::</has_countermeasure>
    <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::An_adversary_needs_mobile_phone_numbers_to_initiate_contact_with_the_victim.::An_adversary_needs_to_correctly_guess_the_entity_with_which_the_victim_does_business_and_impersonate_it._Most_of_the_time_phishers_just_use_the_most_popular_banks/services_and_send_out_their_hooks_to_many_potential_victims.::An_adversary_needs_to_have_a_sufficiently_compelling_call_to_action_to_prompt_the_user_to_take_action.::The_replicated_website_needs_to_look_extremely_similar_to_the_original_website_and_the_URL_used_to_get_to_that_website_needs_to_look_like_the_real_URL_of_the_said_business_entity.::</has_prerequisites>
    <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Either_mobile_phone_or_access_to_a_web_resource_that_allows_text_messages_to_be_sent_to_mobile_phones._Resources_needed_for_regular_Phishing_attack.::</has_resource_required>
    <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
    <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:Basic_knowledge_about_websites:_obtaining_them,_designing_and_implementing_them,_etc.:LEVEL:Medium::</has_skill_level>
    <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An_adversary_targets_mobile_phone_users_with_a_phishing_attack_for_the_purpose_of_soliciting_account_passwords_or_sensitive_information_from_the_user._Mobile_Phishing_is_a_variation_of_the_Phishing_social_engineering_technique_where_the_attack_is_initiated_via_a_text_or_SMS_message,_rather_than_email._The_user_is_enticed_to_provide_information_or_visit_a_compromised_web_site_via_this_message._Apart_from_the_manner_in_which_the_attack_is_initiated,_the_attack_proceeds_as_a_standard_Phishing_attack.</employ>
    <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_severity>
  </owl:NamedIndividual>

  <owl:NamedIndividual rdf:about="#File_Manipulation">
    <rdf:type rdf:resource="#AttackPattern"/>
    <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">File_Manipulation</has_name>
    <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">165</has_id>
    <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">_</has_countermeasure>
    <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The_target_must_use_the_affected_file_without_verifying_its_integrity.::</has_prerequisites>
    <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None:_No_specialized_resources_are_required_to_execute_this_type_of_attack._In_some_cases,_tools_can_be_used_to_better_control_the_response_of_the_targeted_application_to_the_modified_file.::</has_resource_required>
    <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">_</has_likelihood_of_exploit>
    <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">_</has_skill_level>
    <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An_attacker_modifies_file_contents_or_attributes_(such_as_extensions_or_names)_of_files_in_a_manner_to_cause_incorrect_processing_by_an_application._Attackers_use_this_class_of_attacks_to_cause_applications_to_enter_unstable_states,_overwrite_or_expose_sensitive_information,_and_even_execute_arbitrary_code_with_the_application's_privileges._This_class_of_attacks_differs_from_attacks_on_configuration_information_(even_if_file-based)_in_that_file_manipulation_causes_the_file_processing_to_result_in_non-standard_behaviors,_such_as_buffer_overflows_or_use_of_the_incorrect_interpreter._Configuration_attacks_rely_on_the_application_interpreting_files_correctly_in_order_to_insert_harmful_configuration_information._Likewise,_resource_location_attacks_rely_on_controlling_an_application's_ability_to_locate_files,_whereas_File_Manipulation_attacks_do_not_require_the_application_to_look_in_a_non-default_location,_although_the_two_classes_of_attacks_are_often_combined.</employ>
    <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
  </owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Force_the_System_to_Reset_Values">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Force the System to Reset Values</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">166</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The targeted application must have a reset function that returns the configuration of the application to an earlier state.::The reset functionality must be inadequately protected against use.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack. In some cases, the attacker may need special client applications in order to execute the reset functionality.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker forces the target into a previous state in order to leverage potential weaknesses in the target dependent upon a prior configuration or state-dependent factors. Even in cases where an attacker may not be able to directly control the configuration of the targeted application, they may be able to reset the configuration to a prior state since many applications implement reset functions.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#White_Box_Reverse_Engineering">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">White Box Reverse Engineering</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">167</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Direct access to the object or software.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Reverse engineering of software requires varying tools and methods that enable the decompiling of executable or other compiled objects.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Windows_::DATA_Alternate_Data_Stream">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Windows ::DATA Alternate Data Stream</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">168</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Design: Use FAT file systems which do not support Alternate Data Streams.::Implementation: Use Vista dir with the -R switch or utility to find Alternate Data Streams and take appropriate action with those discovered.::Implementation: Use products that are Alternate Data Stream aware for virus scanning and system security operations.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target must be running the Microsoft NTFS file system.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The attacker must have command line or programmatic access to the target's files system with write/read permissions.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker exploits the functionality of Microsoft NTFS Alternate Data Streams (ADS) to undermine system security. ADS allows multiple files to be stored in one directory entry referenced as filename:streamname. One or more alternate data streams may be stored in any file or directory. Normal Microsoft utilities do not show the presence of an ADS stream attached to a file. The additional space for the ADS is not recorded in the displayed file size. The additional space for ADS is accounted for in the used space on the volume. An ADS can be any type of file. ADS are copied by standard Microsoft utilities between NTFS volumes. ADS can be used by an attacker or intruder to hide tools, scripts, and data from detection by normal system utilities. Many anti-virus programs do not check for or scan ADS. Windows Vista does have a switch (-R) on the command line DIR command that will display alternate streams.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Footprinting">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Footprinting</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">169</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Keep patches up to date by installing weekly or daily if possible.::Shut down unnecessary services/ports.::Change default passwords by choosing strong passwords.::Curtail unexpected input.::Encrypt and password-protect sensitive data.::Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::An application must publicize identifiable information about the system or application through voluntary or involuntary means. Certain identification details of information systems are visible on communication networks (e.g., if an adversary uses a sniffer to inspect the traffic) due to their inherent structure and protocol standards. Any system or network that can be detected can be footprinted. However, some configuration choices may limit the useful information that can be collected during a footprinting attack.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:The adversary knows how to send HTTP request, run the scan tool.:LEVEL:Low::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary engages in probing and exploration activities to identify constituents and properties of the target.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Very Low</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Using_Malicious_Files">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Using Malicious Files</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">17</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Design: Enforce principle of least privilege::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:To identify and execute against an over-privileged system interface:LEVEL:Low::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Very High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Web_Application_Fingerprinting">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Web Application Fingerprinting</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">170</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Implementation: Obfuscate server fields of HTTP response.::Implementation: Hide inner ordering of HTTP response header.::Implementation: Customizing HTTP error codes such as 404 or 500.::Implementation: Hide URL file extension.::Implementation: Hide HTTP response header software information filed.::Implementation: Hide cookie's software information filed.::Implementation: Appropriately deal with error messages.::Implementation: Obfuscate database type in Database API's error message.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Any web application can be fingerprinted. However, some configuration choices can limit the useful information an attacker may collect during a fingerprinting attack.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::While simple fingerprinting can be accomplished with only a web browser, for more thorough fingerprinting an attacker requires a variety of tools to collect information about the target. These tools might include protocol analyzers, web-site crawlers, and fuzzing tools. Footprinting a service adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:Attacker knows how to send HTTP request, SQL query to a web application.:LEVEL:Low::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Low</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Action_Spoofing">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Action Spoofing</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">173</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Avoid interacting with suspicious sites or clicking suspicious links.::An organization should provide regular, robust cybersecurity training to its employees.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The adversary must convince the victim into performing the decoy action.::The adversary must have the means to control a user's interface to present them with a decoy action as well as the actual malicious action. Simple versions of this attack can be performed using web pages requiring only that the adversary be able to host (or control) content that the user visits.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
    <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"></has_skill_level>
    <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An_adversary_is_able_to_disguise_one_action_for_another_and_therefore_trick_a_user_into_initiating_one_type_of_action_when_they_intend_to_initiate_a_different_action._For_example,_a_user_might_be_led_to_believe_that_clicking_a_button_will_submit_a_query,_but_in_fact_it_downloads_software._Adversaries_may_perform_this_attack_through_social_means,_such_as_by_simply_convincing_a_victim_to_perform_the_action_or_relying_on_a_user's_natural_inclination_to_do_so,_or_through_technical_means,_such_as_a_clickjacking_attack_where_a_user_sees_one_interface_but_is_actually_interacting_with_a_second,_invisible,_interface.</employ>
    <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Very_High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Flash_Parameter_Injection">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Flash_Parameter_Injection</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">174</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::User_input_must_be_sanitized_according_to_context_before_reflected_back_to_the_user._The_JavaScript_function_'encodeURI'_is_not_always_sufficient_for_sanitizing_input_intended_for_global_Flash_parameters._Extreme_caution_should_be_taken_when_saving_user_input_in_Flash_cookies._In_such_cases_the_Flash_file_itself_will_need_to_be_fixed_and_recompiled,_changing_the_name_of_the_local_shared_objects_(Flash_cookies).::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string"></has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The_adversary_must_convince_the_victim_to_click_their_crafted_link.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:The_adversary_need_inject_values_into_the_global_parameters_to_the_Flash_file_and_understand_the_parent_HTML_document_DOM_structure._The_adversary_needs_to_be_smart_enough_to_convince_the_victim_to_click_on_their_crafted_link.:LEVEL:Medium::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An_adversary_takes_advantage_of_improper_data_validation_to_inject_malicious_global_parameters_into_a_Flash_file_embedded_within_an_HTML_document._Flash_files_can_leverage_user-submitted_data_to_configure_the_Flash_document_and_access_the_embedding_HTML_document.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Code_Inclusion">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Code_Inclusion</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">175</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"></has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The_target_application_must_include_external_code/libraries_that_are_executed_when_the_application_runs_and_the_adversary_must_be_able_to_influence_the_specific_files_that_get_included.::The_victim_must_run_the_targeted_application,_possibly_using_the_crafted_parameters_that_the_adversary_uses_to_identify_the_code_to_include.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The_adversary_may_need_the_capability_to_host_code_modules_if_they_wish_their_own_code_files_to_be_included.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"></has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An_adversary_exploits_a_weakness_on_the_target_to_force_arbitrary_code_to_be_retrieved_locally_or_from_a_remote_location_and_executed._This_differs_from_code_injection_in_that_code_injection_involves_the_direct_inclusion_of_code_while_code_inclusion_involves_the_addition_or_replacement_of_a_reference_to_a_code_file,_which_is_subsequently_loaded_by_the_target_and_used_as_part_of_the_code_of_some_application.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Very_High</has_severity>
</owl:NamedIndividual>

  <owl:NamedIndividual rdf:about="#Configuration/Environment_Manipulation">
    <rdf:type rdf:resource="#AttackPattern"/>
    <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Configuration/Environment_Manipulation</has_name>
    <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">176</has_id>
    <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"></has_countermeasure>
    <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The_target_application_must_consult_external_files_or_configuration_controls_to_control_its_execution._All_but_the_very_simplest_applications_meet_this_requirement.::</has_prerequisites>
    <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The_attacker_must_have_the_access_necessary_to_affect_the_files_or_other_environment_items_the_targeted_application_uses_for_its_operations.::</has_resource_required>
    <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"></has_likelihood_of_exploit>
    <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"></has_skill_level>
    <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An_attacker_manipulates_files_or_settings_external_to_a_target_application_which_affect_the_behavior_of_that_application._For_example,_many_applications_use_external_configuration_files_and_libraries_-_modification_of_these_entities_or_otherwise_affecting_the_application's_ability_to_use_them_would_constitute_a_configuration/environment_manipulation_attack.</employ>
    <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
  </owl:NamedIndividual>

  <owl:NamedIndividual rdf:about="#Create_files_with_the_same_name_as_files_protected_with_a_higher_classification">
    <rdf:type rdf:resource="#AttackPattern"/>
    <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Create_files_with_the_same_name_as_files_protected_with_a_higher_classification</has_name>
    <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">177</has_id>
    <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"></has_countermeasure>
    <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The_target_application_must_include_external_files._Most_non-trivial_applications_meet_this_criterion.::The_target_application_does_not_verify_that_a_located_file_is_the_one_it_was_looking_for_through_means_other_than_the_name._Many_applications_fail_to_perform_checks_of_this_type.::The_directories_the_target_application_searches_to_find_the_included_file_include_directories_writable_by_the_attacker_which_are_searched_before_the_protected_directory_containing_the_actual_files._It_is_much_less_common_for_applications_to_meet_this_criterion,_but_if_an_attacker_can_manipulate_the_application's_search_path_(possibly_by_controlling_environmental_variables)_then_they_can_force_this_criterion_to_be_met.::</has_prerequisites>
    <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The_attacker_must_have_sufficient_access_to_place_an_arbitrarily_named_file_somewhere_early_in_the_application's_search_path.::</has_resource_required>
    <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"></has_likelihood_of_exploit>
    <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"></has_skill_level>
    <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An_attacker_exploits_file_location_algorithms_in_an_operating_system_or_application_by_creating_a_file_with_the_same_name_as_a_protected_or_privileged_file._The_attacker_could_manipulate_the_system_if_the_attacker-created_file_is_trusted_by_the_operating_system_or_an_application_component_that_attempts_to_load_the_original_file._Applications_often_load_or_include_external_files,_such_as_libraries_or_configuration_files._These_files_should_be_protected_against_malicious_manipulation._However,_if_the_application_only_uses_the_name_of_the_file_when_locating_it,_an_attacker_may_be_able_to_create_a_file_with_the_same_name_and_place_it_in_a_directory_that_the_application_will_search_before_the_directory_with_the_legitimate_file_is_searched._Because_the_attackers'_file_is_discovered_first,_it_would_be_used_by_the_target_application._This_attack_can_be_extremely_destructive_if_the_referenced_file_is_executable_and/or_is_granted_special_privileges_based_solely_on_having_a_particular_name.</employ>
    <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Very_High</has_severity>
  </owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Cross-Site_Flashing">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Cross-Site Flashing</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">178</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Implementation: Only allow known URL to be included as remote flash movies in a flash application::Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The targeted Flash application must reference external URLs and the locations thus referenced must be controllable through parameters. The Flash application must fail to sanitize such parameters against malicious manipulation. The victim must follow a crafted link created by the attacker.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:knowledge of Flash internals, parameters and remote referencing.:LEVEL:Medium::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Calling_Micro-Services_Directly">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Calling Micro-Services Directly</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">179</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target site must use micro-services that interact with the server and one or more of these micro-services must be vulnerable to some other attack pattern.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The attacker usually needs to be able to invoke micro-services directly in order to control the parameters that are used in their attack. The attacker may require other resources depending on the nature of the flaw in the targeted micro-service.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker is able to discover and query Micro-services at a web location and thereby expose the Micro-services to further exploitation by gathering information about their implementation and function. Micro-services in web pages allow portions of a page to connect to the server and update content without needing to cause the entire page to update. This allows user activity to change portions of the page more quickly without causing disruptions elsewhere.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#XSS_Targeting_Non-Script_Elements">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">XSS Targeting Non-Script Elements</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">18</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.::All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target client software must allow the execution of scripts generated by remote hosts.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Ability to include malicious script in document, e.g. HTML file, or XML document. Ability to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:To achieve a redirection and use of less trusted source, an adversary can simply edit content such as XML payload or HTML files that are sent to client machine.:LEVEL:Low::SKILL:Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.:LEVEL:High::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (&lt;img&gt;), comments in XML documents (&lt; !-CDATA-&gt;), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Very High</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Exploiting_Incorrectly_Configured_Access_Control_Security_Levels">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Exploiting Incorrectly Configured Access Control Security Levels</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">180</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Design: Configure the access control correctly.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target must apply access controls, but incorrectly configure them. However, not all incorrect configurations can be exploited by an attacker. If the incorrect configuration applies too little security to some functionality, then the attacker may be able to exploit it if the access control would be the only thing preventing an attacker's access and it no longer does so. If the incorrect configuration applies too much security, it must prevent legitimate activity and the attacker must be able to force others to require this activity..::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly.:LEVEL:Low::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Flash_File_Overlay">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Flash File Overlay</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">181</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The victim must be tricked into navigating to the attackers' decoy site and performing the actions on the decoy page.::The victim's browser must support invisible Flash overlays.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The attacker must be able to force the Flash overlay over the decoy content.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker creates a transparent overlay using flash in order to intercept user actions for the purpose of performing a clickjacking attack. In this technique, the Flash file provides a transparent overlay over HTML content. Because the Flash application is on top of the content, user actions, such as clicks, are caught by the Flash application rather than the underlying HTML. The action is then interpreted by the overlay to perform the actions the attacker wishes.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Flash_Injection">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Flash Injection</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">182</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Implementation: remove sensitive information such as user name and password in the SWF file.::Implementation: use validation on both client and server side.::Implementation: remove debug information.::Implementation: use SSL when loading external data::Implementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.::</has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target must be capable of running Flash applications. In some cases, the victim must follow an attacker-supplied link.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack. The attacker may need to be able to serve the injected Flash content.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string">High</has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:The attacker needs to have knowledge of Flash, especially how to insert content the executes commands.:LEVEL:Medium::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#IMAP/SMTP_Command_Injection">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">IMAP/SMTP Command Injection</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">183</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::The target environment must consist of a web-mail server that the attacker can query and a back-end mail server. The back-end mail server need not be directly accessible to the attacker.::The web-mail server must fail to adequately sanitize fields received from users and passed on to the back-end mail server.::The back-end mail server must not be adequately secured against receiving malicious commands from the web-mail server.::</has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::None: No specialized resources are required to execute this type of attack. However, in most cases, the attacker will need to be a recognized user of the web-mail server.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An adversary exploits weaknesses in input validation on web-mail servers to execute commands on the IMAP/SMTP server. Web-mail servers often sit between the Internet and the IMAP or SMTP mail server. User requests are received by the web-mail servers which then query the back-end mail server for the requested information and return this response to the user. In an IMAP/SMTP command injection attack, mail-server commands are embedded in parts of the request sent to the web-mail server. If the web-mail server fails to adequately sanitize these requests, these commands are then sent to the back-end mail server when it is queried by the web-mail server, where the commands are then executed. This attack can be especially dangerous since administrators may assume that the back-end server is protected against direct Internet access and therefore may not secure it adequately against the execution of malicious commands.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Medium</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Software_Integrity_Attack">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Software Integrity Attack</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">184</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::Software Integrity Attacks are usually a late stage focus of attack activity which depends upon the success of a chain of prior events. The resources required to perform the attack vary with respect to the overall attack strategy, existing countermeasures which must be bypassed, and the success of early phase attack vectors.::</has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string">::SKILL:Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the attacker to host a payload and then trigger the installation of the payload code.:LEVEL:Medium::</has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Low</has_severity>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="#Malicious_Software_Download">
  <rdf:type rdf:resource="#AttackPattern"/>
  <has_name rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Malicious Software Download</has_name>
  <has_id rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">185</has_id>
  <has_countermeasure rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_countermeasure>
  <has_prerequisites rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_prerequisites>
  <has_resource_required rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_resource_required>
  <has_likelihood_of_exploit rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_likelihood_of_exploit>
  <has_skill_level rdf:datatype="http://www.w3.org/2001/XMLSchema#string"> </has_skill_level>
  <employ rdf:datatype="http://www.w3.org/2001/XMLSchema#string">An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code that originates from an attacker controlled source. There are several variations to this strategy of attack.</employ>
  <has_severity rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Very High</has_severity>
</owl:NamedIndividual>

  </rdf:RDF>